AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # IAM Role for Lambda and EC2 with Secrets Manager Access
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                  - rds:*
                  - ec2:*
                  - cloudwatch:*
                  - secretsmanager:GetSecretValue   # Added Secrets Manager access
                Resource: "*"

  # IAM Role for EC2 with Secrets Manager Access
  EC2ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue   # Added Secrets Manager access
                  - s3:GetObject
                  - rds:*
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2ExecutionRole

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: "MyVPC"

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]  # Second AZ
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet2"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "InternetGateway"
          
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Security Group for EC2 and RDS
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access to EC2 and Postgres ports"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8501'
          ToPort: '8501'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # Secrets Manager to Store RDS Credentials
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "MyRDSSecret"
      Description: "RDS Database credentials"
      GenerateSecretString:
        SecretStringTemplate: '{"username":"dbadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # RDS PostgreSQL Database
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mypostgresdb
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: '16.3'
      MasterUsername: !Sub "{{resolve:secretsmanager:MyRDSSecret:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:MyRDSSecret:SecretString:password}}"
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: true

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: MyLambdaFunction
      Code:
        S3Bucket: "alisam-s3-deploy-bucket"  # Replace with your S3 bucket name
        S3Key: "lambda_function.zip"  # Replace with your S3 key for the Lambda code
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Layers:
        - !Ref LambdaLayer

  # Lambda Layer for psycopg2
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: psycopg2-layer
      Content:
        S3Bucket: "alisam-s3-deploy-bucket"  # Replace with your S3 bucket name
        S3Key: "psycopg2.zip"         # Replace with the S3 key for the psycopg2 layer
      CompatibleRuntimes:
        - python3.12
      CompatibleArchitectures:
        - x86_64
        - arm64

  # CloudWatch Event Rule to Trigger Lambda Every 5 Minutes
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(5 minutes)'
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "LambdaTarget"

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: "alisam-pipeline-key"  # Replace with your EC2 key pair name
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1
      ImageId: ami-0e0568f9dc9d55f5d  # Example for Amazon Linux 2, replace as needed
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum update -y
          yum install -y python3
          pip3 install streamlit boto3 matplotlib psycopg2-binary urllib3==1.26.6
          cd /home/ec2-user
          wget https://alisam-s3-deploy-bucket.s3.amazonaws.com/website.py
          streamlit run website.py --server.port 8501 --server.enableCORS false


  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"
          
  # Route to the Internet Gateway for public subnets
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Route Table with Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

Outputs:
  EC2InstancePublicIP:
    Description: "Public IP of EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp

  RDSEndpoint:
    Description: "RDS PostgreSQL Endpoint"
    Value: !GetAtt RDSInstance.Endpoint.Address

  SecretARN:
    Description: "ARN of RDS credentials in Secrets Manager"
    Value: !Ref RDSSecret
